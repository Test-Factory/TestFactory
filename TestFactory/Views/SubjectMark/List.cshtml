@using System.Web.Http.Tracing
@using TestFactory
@using TestFactory.MVC.ViewModels;
@Styles.Render("~/Students/css");
@model Tuple<GroupViewModel, SubjectViewModel,IList<StudentViewModel>,IList<SubjectMarkViewModel>>

<ul class="side-nav fixed">
    <ul class="collapsible">
        <li class="ietmSidebar activeItem">
            <a class="  collapsible-header  waves-effect waves-teal" href="@Url.RouteUrl("groupStudentList", new {groupId = @Model.Item1.Id}, null)">@GlobalRes_ua.testHolland</a>
        </li>
        <li class="ietmSidebar">
            <a class=" active collapsible-header  waves-effect waves-teal" href="#">@GlobalRes_ua.subject</a>
            <div class="collapsible-body">
                @if (User.IsInRole(Resources.RoleNames.Filler))
                {
                    <a data-bind="click: $root.addSubject" class="dropItem collapsible-header waves-effect waves-teal modal-trigger" >   @GlobalRes_ua.newSubject </a>
                }
                <ul class="collection" data-bind="foreach: subjects">
                    <li>
                        <!-- ko if: mode() == $root.mods.display -->
                        @if (User.IsInRole(Resources.RoleNames.Filler))
                        {
                            <a data-bind="click: $root.editSubject" class="dropItem inlineSubject collapsible-header waves-effect waves-teal "><img src="~/Content/images/16edit.png" /></a>
                        }
                        <a data-bind="text: shortName, css:{boldSubjectSidebar: id() == $root.subject.id()} ,click: function(){ $root.redirectToMarksSubject(id);}"
                           class="dropItem inlineSubject collapsible-header waves-effect waves-teal "></a>
                        <!-- /ko -->
                    </li>
                </ul>
            </div>
        </li>
    </ul>
</ul>
<div id="createSubject" class="modal" data-bind="validationOptions: {errorElementClass: 'invalid'}">
    <h4>@GlobalRes_ua.createSubject </h4>
    <div class="modal-content">
        
        <input id="subjectPicker" type="text"
               data-position="bottom"
               data-bind="textInput: $root.subjectForCreate().longName ,validationOptions: {errorElementClass: 'invalid'},tooltip: { message: $root.subjectForCreate().longName.error }"
               maxlength="100"
               placeholder="@GlobalRes_ua.longName" />
        <input id="subjectPicker" type="text"
               data-position="bottom"
               data-bind="textInput: $root.subjectForCreate().shortName ,validationOptions: {errorElementClass: 'invalid'},tooltip: { message: $root.subjectForCreate().shortName.error }"
               maxlength="15"
               placeholder="@GlobalRes_ua.shortName" />
    </div>
    <div class="btn-popup">
        <div class="col-md-offset-2 col-md-10">
            <a href="#!" class="btn grey btn-default declineCreate  modal-action modal-close waves-effect waves-green btn-flat">@GlobalRes_ua.cancel</a>
            <a href="#!" class="btn btn-default modal-action " data-bind="click: $root.saveAddedSubject">@GlobalRes_ua.save</a>
        </div>
    </div>
</div>
<div id="editSubject" class="modal" data-bind="validationOptions: {errorElementClass: 'invalid'}">
    <h4>@GlobalRes_ua.updateSubject </h4>
    <div class="modal-content">
        
        <input id="subjectPicker" type="text"
               data-position="bottom"
               data-bind="textInput: $root.subjectForUpdate().longName ,validationOptions: {errorElementClass: 'invalid'},tooltip: { message: $root.subjectForUpdate().longName.error }"
               maxlength="100"
               placeholder="@GlobalRes_ua.longName" />
        <input id="subjectPicker" type="text"
               data-position="bottom"
               data-bind="textInput: $root.subjectForUpdate().shortName ,validationOptions: {errorElementClass: 'invalid'},tooltip: { message: $root.subjectForUpdate().shortName.error }"
               maxlength="15"
               placeholder="@GlobalRes_ua.shortName" />     
    </div>
    <div class="btn-popup ">
        <div class="col-md-offset-2 col-md-10">
            <a href="#!" class="btn grey btn-default declineCreate  modal-action modal-close waves-effect waves-green btn-flat">@GlobalRes_ua.cancel</a>
            <a href="#!" class="btn btn-default modal-action " data-bind="click: $root.saveEditedSubject">@GlobalRes_ua.save</a>
        </div>
        </div>
</div>
<div >
    <div  class="title-subject">
        <h3 >(<a class="toDetails" href="@Url.RouteUrl("groupStudentList", new { groupId = Model.Item1.Id }, null)">@Model.Item1.ShortName</a>) </h3>
        <h3  data-bind="text: $root.subject.longName"></h3>
    </div>
    <table style="width: 500px;">
        <thead class="header-marks-subject">
                <tr>
                    <th style="width: 300px">Прізвище, Ім'я</th>
                    <th>Оцінка</th>
                </tr>
            </thead>
            <tbody class="mark-content">
                <div style="width: 100%; height: 100px;"></div>
                @foreach (var student in Model.Item3)
                {
                for (int i = 0; i < Model.Item4.Count; i++)
                {
                if (student.Id == Model.Item4[i].StudentId)
                {
                <tr>
                    <td class="padding-td-subject-marks" style="width: 300px">@student.LastName @student.FirstName</td>
                    @if (User.IsInRole(Resources.RoleNames.Filler))
                    {
                    var Value = Model.Item4[i].Value;
                    var Id = Model.Item4[i].Id;
                    var SubjectId = Model.Item4[i].SubjectId;
                    var StudentId = Model.Item4[i].StudentId;
                    if (Model.Item4[i].Value == null)
                    {
                    <td class="mark-input">
                        @using (Html.BeginForm("Create", "SubjectMark", FormMethod.Post, new {@class = "form-mark"}))
                        {
                        @Html.AntiForgeryToken()
                        @Html.EditorFor(model => Value, new {htmlAttributes = new {@class = "form-control widthInput", @min = "0", @max = @Int32.MaxValue, @onblur = "SubmitForm(this, '/subjectMark/Create')"}})
                        @Html.HiddenFor(marks => StudentId)
                        @Html.HiddenFor(marks => SubjectId)
                        @Html.HiddenFor(marks => Id)

                        <div style="display: inline-block">
                            <div class="preloader-wrapper big active preloader-size preloader-visibility">
                                <div class="spinner-layer spinner-yellow-only">
                                    <div class="circle-clipper left">
                                        <div class="circle"></div>
                                    </div>
                                    <div class="gap-patch">
                                        <div class="circle"></div>
                                    </div>
                                    <div class="circle-clipper right">
                                        <div class="circle"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div style="display: inline-block">
                            <div class="icon-mark icon-mark-ok">
                                <i class="large material-icons">done</i>
                            </div>
                            <div class="icon-mark icon-mark-bad">
                                <i class="large material-icons">report</i>
                            </div>
                        </div>
                        }
                    </td>
                    }
                    else
                    {
                    <td class="mark-input">
                        @using (Html.BeginForm("Update", "SubjectMark", FormMethod.Post, new {@class = "form-mark"}))
                        {
                        @Html.AntiForgeryToken()
                        @Html.EditorFor(model => Value, new {htmlAttributes = new {@class = "form-control widthInput", @min = "0", @max = @Int32.MaxValue, @onblur = "SubmitForm(this, '/subjectMark/Update')"}})
                        @Html.HiddenFor(marks => StudentId)
                        @Html.HiddenFor(marks => SubjectId)
                        @Html.HiddenFor(marks => Id)
                        <div style="display: inline-block">
                            <div class="preloader-wrapper big active preloader-size preloader-visibility">
                                <div class="spinner-layer spinner-yellow-only">
                                    <div class="circle-clipper left">
                                        <div class="circle"></div>
                                    </div>
                                    <div class="gap-patch">
                                        <div class="circle"></div>
                                    </div>
                                    <div class="circle-clipper right">
                                        <div class="circle"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div style="display: inline-block">
                            <div class="icon-mark icon-mark-ok">
                                <i class="large material-icons ok-icon">done</i>
                            </div>
                            <div class="icon-mark icon-mark-bad">
                                <i class="large material-icons bad-icon">report</i>
                            </div>
                        </div>
                        }
                    </td>
                    }
                    }
                    else
                    {
                    <td class="padding-td-subject-marks">@Model.Item4[i].Value</td>
                    }
                </tr>
                }
                }
                }
            </tbody>
        </table>
    </div>

@section Scripts{
    @Scripts.Render("~/Scripts/SubjectMark.js")
    <script>
        var globalView = null;
        $(document).ready(function() {
            //$('#create').leanModal();
            var group = @Html.Raw(Json.Encode(Model.Item1));
            var subject = @Html.Raw(Json.Encode(Model.Item2));
            var viewModel = new SubjectViewModel(group, subject);
            globalView = viewModel;
            ko.applyBindings(viewModel);
        });

    </script>
}